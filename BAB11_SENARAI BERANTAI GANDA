llsenaraiBerantaiGandalengkap.cpp
I/Mendemonstrasikan senarai berantai ganda
#include <iostream>
#include <conio.h>
using namespace std;
class Simpul
}
public:
double dData; I/item data
Simpul* pBrktnya; //simpul berikutnya pada senarai
Simpul* pSblmnya; //simpul sbmnya pada senarai
public:
Simpul(double dd) : //konstruktor
dData(dd), pBrktnya(NULL), pSblmnya(NULL)
{ }
void tampilSenarai() //menampilkan simpull
{ cout << dData << " "; }
}; l/akhir kelas Simpul
class SenaraiBerantaiGanda
private:
Simpul* pPertama; //pointer ke item pertama
Simpul* pAkhir; //pointer ke item terakhir
public:
SenaraiBerantaiGanda() : //konstruktor
pPertama(NULL), pAkhir(NULL)
()
-SenaraiBerantaiGanda() lldestruktor (menghapus simpul)
Simpul" pSkrg = pPertama; l/mulai diawal senarai
while(pSkrg != NULL) //sampai akhir senarai,
Simpul" pLama = pSkrg;
pSkrg = pSkrg->pBrktnya;
delete plama;
bool apaKosong() //true jika tidak ada simpul
{ return pPertama=%3NULL; }
Ilmenyisipkan di awal senarai
void sisipPertama(double dd)
Simpul" pSimpulBaru = new Simpul(dd); Il/menciptakan simpul baru
if( apaKosong()) /jika senarai kosong,
pAkhir = pSimpulBaru;
else
pPertama->pSblmnya = pSimpulBaru;
pSimpulBaru->pBrktnya = pPertama;
pPertama = pSimpulBaru;
void sisipAkhir(double dd) //menyisipkan di akhir senarai
Simpul" pSimpulBaru = new Simpul(dd); //menciptakan simpul baru
if( apaKosong() )
pPertama = pSimpulBaru;
else
PAkhir->pBrktnya = pSimpulBaru;
pSimpulBaru->pSblmnya = pAkhir;
PAkhir = pSimpulBaru;
void hapusPertama()
{(asumsi senarai-kosong)
Simpul" pTemp = pPertama;
if(pPertama->pBrktnya == NULL)
pAkhir = NULL;
else
pPertama->pBrktnya->pSblmnya = NULL;
pPertama = pPertama->pBrktnya;B
delete pTemp;
void hapusAkhir()
{ //(asumsi senarai-kosong)
Simpul" pTemp = pAkhir,
if(pPertama->pBrktnya == NULL)
pPertama = NULL;
else
PAkhir->pSblmnya->pBrktnya = NULL;
pAkhir = pAkhir->pSblmnya;
delete pTemp;
Ilmenyisipkan tepat setelah kunci
bool sisipSetelah(double kunci, double dd)
{ //(asumsi senarai-kosong)
Simpul" pSkrg = pPertama;
while(pSkrg->dData != kunci)
pSkrg = pSkrg->pBrktnya;
if(pSkrg == NULL)
return false;
Simpul" pSimpulBaru = new Simpul(dd);
if(pSkrg3%3DpAkhir)
pSimpulBaru->pBrktnya = NULL;
pAkhir = pSimpulBaru;
else
pSimpulBaru->pBrktnya = pSkrg->pBrktnya;
pSkrg->pBrktnya->pSblmnya = pSimpulBaru;
}
pSimpulBaru->pSblmnya pSkrgB
pSkrg->pBrktnya pSimpulBaru;
return true;
bool hapusKunci(double kunci)
{(asumsi senarai-kosong)
Simpul" pSkrg pPertama;
while(pSkrg->dData != kunci)
}
pSkrg pSkrg->pBrktnya;
if(pSkrg%3D%3D NULL)
returm false;
{
if(pSkrg=%3DpPertama)
pPertama = pSkrg->pBrktnya;
else
pSkrg->pSblmnya->pBrktnya = pSkrg->pBrktnya;
if(pSkrg3%3DpAkhir)
pAkhir = pSkrg->pSblmnya;
else
pSkrg->pBrktnya->pSblmnya = pSkrg->pSblmnya;
delete pSkrg:
return true;
{
void tampilMaju()
cout << "Senarai (pertama-->akhir): ";
Simpul" pSkrg = pPertama;
while(pSkrg != NULL)
pSkrg->tampilSenarai();
pSkrg = pSkrg->pBrktnya;
cout << endl;
void tampilMundur()
{
cout << "Senarai (akhir->pertama): ";
Simpul* pSkrg = pAkhir,
while(pSkrg != NULL)
}
pSkrg->tampilSenarai();
pSkrg = pSkrg->pSblmnya;
{
cout << endl;
{
}; llakhir kelas SenaraiBerantaiGanda
int main()
SenaraiBerantaiGanda senarai; l/menciptakan senarai baru
senarai.sisipPertama(22); I/menyisipkan di depan
senarai.sisipPertama(44);
senarai.sisipPertama(66);
senarai.sisipAkhir(11); //menyisipkan di belakang
senarai.sisipAkhir(33);
senarai.sisipAkhir(55);
senarai.tampilMaju(); //menampilkan senarai secara maju
senarai.tampilMundur(); //menampilkan senarai secara mundur
cout << "Menghapus simpul pertama, simpul akhir, dan 11" << endl;
senarai.hapusPertama();
senarai.hapusAkhir();
senarai.hapusKunci(11);
senarai.tampilMaju(); //menampilkan senarai secara maju
cout << "Menyisipkan 77 setelah simpul 22, dan 88 setelah 33" << endl:
senarai.sisipSetelah(22, 77);
senarai.sisipSetelah(33, 88);
senarai.tampilMaju(); //menampilkan senarai secara maju
getch();
return 0;
} l/akhir main()
