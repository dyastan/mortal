l/pohonAVL
* Program C++ untuk mengimplementasikan pohon AVL.
#include<iostream>
#include<cstdio>
#include<sstream>
#include<algorithm>
#include<conio.h>
#define pow2(n) (1 << (n))
using namespace std;
Deklarasi Simpul
struct simpulAVL
int data;
struct simpulAVL *kiri;
struct simpulAVL "kanan;
}*akar;
* Deklarasi kelas
class PohonAVL
{
public:
int tinggi(simpulIAVL );
int selisih(simpulAVL "):
simpulAVL "rotasi_rr(simpulAVL "):
simpulAVL "rotasi_(simpulAVL *):
simpulAVL "rotasi_Ir(simpulAVL *):
simpulAVL "rotasi_ri(simpulAVL "):
simpulAVL setimbang(simpulAVL ");
simpulAVL sisip(simpulAVL , int );
void tampil(simpulAVL, int);
void inorder(simpulAVL "):
void preorder(simpulAVL ");
void postorder(simpulAVL ");
PohonAVL()
}
akar = NULL;
Program penguji
1.
int main()
int pilihan, item;
PohonAVL avl;
while (1)
cout<<"\n-
-"<<endl;
cout<<"Implementasi Pohon AVL"<<endl;
cout<<"\n-
-"<<endl;
cout<<"1.Sisipkan elemen ke dalam pohon"<<endl;
cout<<"2.Tampilkan Pohon AVL Seimbang"<<endl;
cout<<"3.Penjelajahan InOrder"<<endl;
cout<<"4.Penjelajahan PreOrder"<<endl;
cout<<"5.Penjelajahan PostOrder"<<endl;
cout<<"6.Keluar"<<endl;
cout<<"Masukkan pilihan Anda: ";
cin>>pilihan;
switch(pilihan)
case 1:
cout<<"Masukkan nilai yang akan disisipkan: ";
[23:44, 1/3/2020] +62 877-2580-9649: cin>>item;
akar = avl.sisip(akar, item);
break;
case 2:
if (akar == NULL)
}
cout<<"Pohon kosong"<<endl;
continue;
cout<<"Pohon AVL Seimbang:"<<endl;
avl.tampil(akar, 1);
break;
case 3:
cout<<"Penjelajahan Inorder:"<<endl;
avl.inorder(akar);
cout<<endl;
break;
case 4:
cout<<"Penjelajahan Preorder:"<<endl;
avl.preorder(akar);
cout<<endl:
break;
case 5:
cout<<"Penjelajahan Postorder."<<endl;
avl.postorder(akar);
cout<<endl;
break;
case 6:
exit(1);
break;
default:
cout<<"Pilihan Salah"<<endl;
{
getch();
return 0;
* Tinggi Pohon AVL
1.
int PohonAVL:tinggi(simpulAVL "temp)
{
[23:45, 1/3/2020] +62 877-2580-9649: int h = 0;
if (temp != NULL)
int tinggil = tinggi (temp->kiri);
int tinggiR = tinggi (temp->kanan);
int tinggiMaks = max (tinggiL, tinggiR):
h= tinggiMaks + 1;
{
return h;
* Selisih tinggi
1.
int PohonAVL:selisih(simpulAVL "temp)
int tinggil = tinggi (temp->kiri);
int tinggiR = tinggi (temp->kanan);
int faktorB= tinggiL - tinggiR;
return faktorB;
{
* RotasiRR
simpulAVL "PohonAVL: rotasi_rr(simpulAVL *induk)
}
simpulAVL *temp;
temp = induk->kanan;
induk->kanan = temp->kiri;
temp->kiri = induk;
return temp;
{
* Rotasi LL
/.
simpulAVL "PohonAVL:rotasi_|(simpulAVL *induk)
simpulAVL "temp;
temp = induk->kiri;
induk->kiri = temp->kanan;
temp->kanan = induk;
return temp;
}
* Rotasi LR
simpulAVL *PohonAVL::rotasi_Ir(simpulAVL "induk)
}
simpulAVL *temp;
temp = induk->kiri;
induk->kiri = rotasi_rr (temp);
return rotasi_II (induk);
{
* Rotasi RL
1.
simpulAVL *PohonAVL:rotasi_rl(simpulAVL "induk)
simpulAVL *temp3;
temp = induk->kanan3;
induk->kanan rotasi_II (temp);
return rotasi_rr (induk);
{
* Menyeimbangkan Pohon AVL
simpulAVL "PohonAVL::setimbang(simpulAVL "temp)
int faktor_seimbang = selisih (temp);
if (faktor_seimbang > 1)
}
if (selisih (temp->kiri) > 0)
temp = rotasi_II (temp);
else
temp = rotasi_Ir (temp);
else if (faktor_seimbang < -1)
if (selisih (temp->kanan) > 0)
temp = rotasi_rl (temp);
else
temp = rotasi_rr (temp);
{
return temp;
}
* Menyisipkan elemen ke dalam pohon
simpulAVL "PohonAVL::sisip(simpulAVL "akar, int nilal)
}
if (akar == NULL)
akar = new simpulAVL;
akar->data = nilai;
akar->kiri = NULL;
akar->kanan = NULL;
return akar,
else if (nilai < akar->data)
akar->kiri = sisip(akar->kiri, nilai);
akar = setimbang (akar);
else if (nilai >= akar->data)
akar->kanan = sisip(akar->kanan, nilai);
akar = setimbang (akar);
return akar;
* Menampilkan Pohon AVL
void PohonAVL::tampil(simpulAVL *ptr, int level)
}
int i;
if (ptr!=NULL)
}
tampil(ptr->kanan, level + 1);
printf("\n");
if (ptr == akar)
cout<<"Akar -> ";
for (i = 0; i < level && ptr != akar; i++)
cout<<"
cout<<ptr->data;
tampil(ptr->kiri, level + 1);
}
}
* Penjelajahan Inorder atas pohon AVL
1.
void PohonAVL:inorder(simpulAVL "pohon)
if (pohon == NULL)
return;
inorder (pohon->kiri);
cout<<pohon->data<< ";
inorder (pohon->kanan);
* Penjelajahan Preorder atas pohon AVL
void PohonAVL preorder(simpulAVL "pohon)
if (pohon = NULL)
cout<<pohon->data<< ";
preorder (pohon->kiri);
preorder (pohon->kanan);
* Penjelajahan Postorder atas pohon AVL
void PohonAVL:postorder(simpulAVL "pohon)
if (pohon == NULL)
return;
postorder ( pohon ->kiri );
postorder ( pohon ->kanan );
cout<<pohon->data<<" ";
}
